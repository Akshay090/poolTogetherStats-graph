// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class AdminAdded extends EthereumEvent {
  get params(): AdminAdded__Params {
    return new AdminAdded__Params(this);
  }
}

export class AdminAdded__Params {
  _event: AdminAdded;

  constructor(event: AdminAdded) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AdminRemoved extends EthereumEvent {
  get params(): AdminRemoved__Params {
    return new AdminRemoved__Params(this);
  }
}

export class AdminRemoved__Params {
  _event: AdminRemoved;

  constructor(event: AdminRemoved) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Committed extends EthereumEvent {
  get params(): Committed__Params {
    return new Committed__Params(this);
  }
}

export class Committed__Params {
  _event: Committed;

  constructor(event: Committed) {
    this._event = event;
  }

  get drawId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CommittedDepositWithdrawn extends EthereumEvent {
  get params(): CommittedDepositWithdrawn__Params {
    return new CommittedDepositWithdrawn__Params(this);
  }
}

export class CommittedDepositWithdrawn__Params {
  _event: CommittedDepositWithdrawn;

  constructor(event: CommittedDepositWithdrawn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Deposited extends EthereumEvent {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DepositedAndCommitted extends EthereumEvent {
  get params(): DepositedAndCommitted__Params {
    return new DepositedAndCommitted__Params(this);
  }
}

export class DepositedAndCommitted__Params {
  _event: DepositedAndCommitted;

  constructor(event: DepositedAndCommitted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DepositsPaused extends EthereumEvent {
  get params(): DepositsPaused__Params {
    return new DepositsPaused__Params(this);
  }
}

export class DepositsPaused__Params {
  _event: DepositsPaused;

  constructor(event: DepositsPaused) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DepositsUnpaused extends EthereumEvent {
  get params(): DepositsUnpaused__Params {
    return new DepositsUnpaused__Params(this);
  }
}

export class DepositsUnpaused__Params {
  _event: DepositsUnpaused;

  constructor(event: DepositsUnpaused) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FeeCollected extends EthereumEvent {
  get params(): FeeCollected__Params {
    return new FeeCollected__Params(this);
  }
}

export class FeeCollected__Params {
  _event: FeeCollected;

  constructor(event: FeeCollected) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get drawId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NextFeeBeneficiaryChanged extends EthereumEvent {
  get params(): NextFeeBeneficiaryChanged__Params {
    return new NextFeeBeneficiaryChanged__Params(this);
  }
}

export class NextFeeBeneficiaryChanged__Params {
  _event: NextFeeBeneficiaryChanged;

  constructor(event: NextFeeBeneficiaryChanged) {
    this._event = event;
  }

  get feeBeneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NextFeeFractionChanged extends EthereumEvent {
  get params(): NextFeeFractionChanged__Params {
    return new NextFeeFractionChanged__Params(this);
  }
}

export class NextFeeFractionChanged__Params {
  _event: NextFeeFractionChanged;

  constructor(event: NextFeeFractionChanged) {
    this._event = event;
  }

  get feeFraction(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OpenDepositWithdrawn extends EthereumEvent {
  get params(): OpenDepositWithdrawn__Params {
    return new OpenDepositWithdrawn__Params(this);
  }
}

export class OpenDepositWithdrawn__Params {
  _event: OpenDepositWithdrawn;

  constructor(event: OpenDepositWithdrawn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Opened extends EthereumEvent {
  get params(): Opened__Params {
    return new Opened__Params(this);
  }
}

export class Opened__Params {
  _event: Opened;

  constructor(event: Opened) {
    this._event = event;
  }

  get drawId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feeBeneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get secretHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get feeFraction(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Rewarded extends EthereumEvent {
  get params(): Rewarded__Params {
    return new Rewarded__Params(this);
  }
}

export class Rewarded__Params {
  _event: Rewarded;

  constructor(event: Rewarded) {
    this._event = event;
  }

  get drawId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get entropy(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get winnings(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RolledOver extends EthereumEvent {
  get params(): RolledOver__Params {
    return new RolledOver__Params(this);
  }
}

export class RolledOver__Params {
  _event: RolledOver;

  constructor(event: RolledOver) {
    this._event = event;
  }

  get drawId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SponsorshipAndFeesWithdrawn extends EthereumEvent {
  get params(): SponsorshipAndFeesWithdrawn__Params {
    return new SponsorshipAndFeesWithdrawn__Params(this);
  }
}

export class SponsorshipAndFeesWithdrawn__Params {
  _event: SponsorshipAndFeesWithdrawn;

  constructor(event: SponsorshipAndFeesWithdrawn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SponsorshipDeposited extends EthereumEvent {
  get params(): SponsorshipDeposited__Params {
    return new SponsorshipDeposited__Params(this);
  }
}

export class SponsorshipDeposited__Params {
  _event: SponsorshipDeposited;

  constructor(event: SponsorshipDeposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrawn extends EthereumEvent {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract__getDrawResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Bytes;
  value4: Bytes;
  value5: Address;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Bytes,
    value4: Bytes,
    value5: Address,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromFixedBytes(this.value3));
    map.set("value4", EthereumValue.fromFixedBytes(this.value4));
    map.set("value5", EthereumValue.fromAddress(this.value5));
    map.set("value6", EthereumValue.fromUnsignedBigInt(this.value6));
    map.set("value7", EthereumValue.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class Contract extends SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  accountedBalance(): BigInt {
    let result = super.call("accountedBalance", []);

    return result[0].toBigInt();
  }

  try_accountedBalance(): CallResult<BigInt> {
    let result = super.tryCall("accountedBalance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  balance(): BigInt {
    let result = super.call("balance", []);

    return result[0].toBigInt();
  }

  try_balance(): CallResult<BigInt> {
    let result = super.tryCall("balance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(_addr: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(_addr)]);

    return result[0].toBigInt();
  }

  try_balanceOf(_addr: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [EthereumValue.fromAddress(_addr)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  cToken(): Address {
    let result = super.call("cToken", []);

    return result[0].toAddress();
  }

  try_cToken(): CallResult<Address> {
    let result = super.tryCall("cToken", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  calculateWinner(_entropy: Bytes): Address {
    let result = super.call("calculateWinner", [
      EthereumValue.fromFixedBytes(_entropy)
    ]);

    return result[0].toAddress();
  }

  try_calculateWinner(_entropy: Bytes): CallResult<Address> {
    let result = super.tryCall("calculateWinner", [
      EthereumValue.fromFixedBytes(_entropy)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  canLock(): boolean {
    let result = super.call("canLock", []);

    return result[0].toBoolean();
  }

  try_canLock(): CallResult<boolean> {
    let result = super.tryCall("canLock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  committedBalanceOf(_addr: Address): BigInt {
    let result = super.call("committedBalanceOf", [
      EthereumValue.fromAddress(_addr)
    ]);

    return result[0].toBigInt();
  }

  try_committedBalanceOf(_addr: Address): CallResult<BigInt> {
    let result = super.tryCall("committedBalanceOf", [
      EthereumValue.fromAddress(_addr)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  committedSupply(): BigInt {
    let result = super.call("committedSupply", []);

    return result[0].toBigInt();
  }

  try_committedSupply(): CallResult<BigInt> {
    let result = super.tryCall("committedSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  cooldownDuration(): BigInt {
    let result = super.call("cooldownDuration", []);

    return result[0].toBigInt();
  }

  try_cooldownDuration(): CallResult<BigInt> {
    let result = super.tryCall("cooldownDuration", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  cooldownEndAt(): BigInt {
    let result = super.call("cooldownEndAt", []);

    return result[0].toBigInt();
  }

  try_cooldownEndAt(): CallResult<BigInt> {
    let result = super.tryCall("cooldownEndAt", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  currentCommittedDrawId(): BigInt {
    let result = super.call("currentCommittedDrawId", []);

    return result[0].toBigInt();
  }

  try_currentCommittedDrawId(): CallResult<BigInt> {
    let result = super.tryCall("currentCommittedDrawId", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  currentOpenDrawId(): BigInt {
    let result = super.call("currentOpenDrawId", []);

    return result[0].toBigInt();
  }

  try_currentOpenDrawId(): CallResult<BigInt> {
    let result = super.tryCall("currentOpenDrawId", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  daiToken(): Address {
    let result = super.call("daiToken", []);

    return result[0].toAddress();
  }

  try_daiToken(): CallResult<Address> {
    let result = super.tryCall("daiToken", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  estimatedInterestRate(_blocks: BigInt): BigInt {
    let result = super.call("estimatedInterestRate", [
      EthereumValue.fromUnsignedBigInt(_blocks)
    ]);

    return result[0].toBigInt();
  }

  try_estimatedInterestRate(_blocks: BigInt): CallResult<BigInt> {
    let result = super.tryCall("estimatedInterestRate", [
      EthereumValue.fromUnsignedBigInt(_blocks)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getDraw(_drawId: BigInt): Contract__getDrawResult {
    let result = super.call("getDraw", [
      EthereumValue.fromUnsignedBigInt(_drawId)
    ]);

    return new Contract__getDrawResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBytes(),
      result[4].toBytes(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_getDraw(_drawId: BigInt): CallResult<Contract__getDrawResult> {
    let result = super.tryCall("getDraw", [
      EthereumValue.fromUnsignedBigInt(_drawId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__getDrawResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBytes(),
        value[4].toBytes(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  isAdmin(_admin: Address): boolean {
    let result = super.call("isAdmin", [EthereumValue.fromAddress(_admin)]);

    return result[0].toBoolean();
  }

  try_isAdmin(_admin: Address): CallResult<boolean> {
    let result = super.tryCall("isAdmin", [EthereumValue.fromAddress(_admin)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isLocked(): boolean {
    let result = super.call("isLocked", []);

    return result[0].toBoolean();
  }

  try_isLocked(): CallResult<boolean> {
    let result = super.tryCall("isLocked", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  lockDuration(): BigInt {
    let result = super.call("lockDuration", []);

    return result[0].toBigInt();
  }

  try_lockDuration(): CallResult<BigInt> {
    let result = super.tryCall("lockDuration", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  lockEndAt(): BigInt {
    let result = super.call("lockEndAt", []);

    return result[0].toBigInt();
  }

  try_lockEndAt(): CallResult<BigInt> {
    let result = super.tryCall("lockEndAt", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  moveCommitted(_from: Address, _to: Address, _amount: BigInt): boolean {
    let result = super.call("moveCommitted", [
      EthereumValue.fromAddress(_from),
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_moveCommitted(
    _from: Address,
    _to: Address,
    _amount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("moveCommitted", [
      EthereumValue.fromAddress(_from),
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  nextFeeBeneficiary(): Address {
    let result = super.call("nextFeeBeneficiary", []);

    return result[0].toAddress();
  }

  try_nextFeeBeneficiary(): CallResult<Address> {
    let result = super.tryCall("nextFeeBeneficiary", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  nextFeeFraction(): BigInt {
    let result = super.call("nextFeeFraction", []);

    return result[0].toBigInt();
  }

  try_nextFeeFraction(): CallResult<BigInt> {
    let result = super.tryCall("nextFeeFraction", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  openBalanceOf(_addr: Address): BigInt {
    let result = super.call("openBalanceOf", [
      EthereumValue.fromAddress(_addr)
    ]);

    return result[0].toBigInt();
  }

  try_openBalanceOf(_addr: Address): CallResult<BigInt> {
    let result = super.tryCall("openBalanceOf", [
      EthereumValue.fromAddress(_addr)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  openSupply(): BigInt {
    let result = super.call("openSupply", []);

    return result[0].toBigInt();
  }

  try_openSupply(): CallResult<BigInt> {
    let result = super.tryCall("openSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", []);

    return result[0].toBoolean();
  }

  try_paused(): CallResult<boolean> {
    let result = super.tryCall("paused", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  poolToken(): Address {
    let result = super.call("poolToken", []);

    return result[0].toAddress();
  }

  try_poolToken(): CallResult<Address> {
    let result = super.tryCall("poolToken", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  saiPool(): Address {
    let result = super.call("saiPool", []);

    return result[0].toAddress();
  }

  try_saiPool(): CallResult<Address> {
    let result = super.tryCall("saiPool", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  saiToken(): Address {
    let result = super.call("saiToken", []);

    return result[0].toAddress();
  }

  try_saiToken(): CallResult<Address> {
    let result = super.tryCall("saiToken", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  scdMcdMigration(): Address {
    let result = super.call("scdMcdMigration", []);

    return result[0].toAddress();
  }

  try_scdMcdMigration(): CallResult<Address> {
    let result = super.tryCall("scdMcdMigration", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  sponsorshipAndFeeBalanceOf(_sender: Address): BigInt {
    let result = super.call("sponsorshipAndFeeBalanceOf", [
      EthereumValue.fromAddress(_sender)
    ]);

    return result[0].toBigInt();
  }

  try_sponsorshipAndFeeBalanceOf(_sender: Address): CallResult<BigInt> {
    let result = super.tryCall("sponsorshipAndFeeBalanceOf", [
      EthereumValue.fromAddress(_sender)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  supplyRatePerBlock(): BigInt {
    let result = super.call("supplyRatePerBlock", []);

    return result[0].toBigInt();
  }

  try_supplyRatePerBlock(): CallResult<BigInt> {
    let result = super.tryCall("supplyRatePerBlock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", []);

    return result[0].toAddress();
  }

  try_token(): CallResult<Address> {
    let result = super.tryCall("token", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  totalBalanceOf(_addr: Address): BigInt {
    let result = super.call("totalBalanceOf", [
      EthereumValue.fromAddress(_addr)
    ]);

    return result[0].toBigInt();
  }

  try_totalBalanceOf(_addr: Address): CallResult<BigInt> {
    let result = super.tryCall("totalBalanceOf", [
      EthereumValue.fromAddress(_addr)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  withdrawCommittedDeposit(_amount: BigInt): boolean {
    let result = super.call("withdrawCommittedDeposit", [
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_withdrawCommittedDeposit(_amount: BigInt): CallResult<boolean> {
    let result = super.tryCall("withdrawCommittedDeposit", [
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  withdrawCommittedDepositFrom(_from: Address, _amount: BigInt): boolean {
    let result = super.call("withdrawCommittedDepositFrom", [
      EthereumValue.fromAddress(_from),
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_withdrawCommittedDepositFrom(
    _from: Address,
    _amount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("withdrawCommittedDepositFrom", [
      EthereumValue.fromAddress(_from),
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddAdminCall extends EthereumCall {
  get inputs(): AddAdminCall__Inputs {
    return new AddAdminCall__Inputs(this);
  }

  get outputs(): AddAdminCall__Outputs {
    return new AddAdminCall__Outputs(this);
  }
}

export class AddAdminCall__Inputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAdminCall__Outputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }
}

export class BalanceCall extends EthereumCall {
  get inputs(): BalanceCall__Inputs {
    return new BalanceCall__Inputs(this);
  }

  get outputs(): BalanceCall__Outputs {
    return new BalanceCall__Outputs(this);
  }
}

export class BalanceCall__Inputs {
  _call: BalanceCall;

  constructor(call: BalanceCall) {
    this._call = call;
  }
}

export class BalanceCall__Outputs {
  _call: BalanceCall;

  constructor(call: BalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DaiTokenCall extends EthereumCall {
  get inputs(): DaiTokenCall__Inputs {
    return new DaiTokenCall__Inputs(this);
  }

  get outputs(): DaiTokenCall__Outputs {
    return new DaiTokenCall__Outputs(this);
  }
}

export class DaiTokenCall__Inputs {
  _call: DaiTokenCall;

  constructor(call: DaiTokenCall) {
    this._call = call;
  }
}

export class DaiTokenCall__Outputs {
  _call: DaiTokenCall;

  constructor(call: DaiTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DepositPoolCall extends EthereumCall {
  get inputs(): DepositPoolCall__Inputs {
    return new DepositPoolCall__Inputs(this);
  }

  get outputs(): DepositPoolCall__Outputs {
    return new DepositPoolCall__Outputs(this);
  }
}

export class DepositPoolCall__Inputs {
  _call: DepositPoolCall;

  constructor(call: DepositPoolCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositPoolCall__Outputs {
  _call: DepositPoolCall;

  constructor(call: DepositPoolCall) {
    this._call = call;
  }
}

export class DepositSponsorshipCall extends EthereumCall {
  get inputs(): DepositSponsorshipCall__Inputs {
    return new DepositSponsorshipCall__Inputs(this);
  }

  get outputs(): DepositSponsorshipCall__Outputs {
    return new DepositSponsorshipCall__Outputs(this);
  }
}

export class DepositSponsorshipCall__Inputs {
  _call: DepositSponsorshipCall;

  constructor(call: DepositSponsorshipCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositSponsorshipCall__Outputs {
  _call: DepositSponsorshipCall;

  constructor(call: DepositSponsorshipCall) {
    this._call = call;
  }
}

export class InitCall extends EthereumCall {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _cToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _feeFraction(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _feeBeneficiary(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get lockDuration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get cooldownDuration(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class InitMCDAwarePoolCall extends EthereumCall {
  get inputs(): InitMCDAwarePoolCall__Inputs {
    return new InitMCDAwarePoolCall__Inputs(this);
  }

  get outputs(): InitMCDAwarePoolCall__Outputs {
    return new InitMCDAwarePoolCall__Outputs(this);
  }
}

export class InitMCDAwarePoolCall__Inputs {
  _call: InitMCDAwarePoolCall;

  constructor(call: InitMCDAwarePoolCall) {
    this._call = call;
  }

  get lockDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get cooldownDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitMCDAwarePoolCall__Outputs {
  _call: InitMCDAwarePoolCall;

  constructor(call: InitMCDAwarePoolCall) {
    this._call = call;
  }
}

export class InitMigrationCall extends EthereumCall {
  get inputs(): InitMigrationCall__Inputs {
    return new InitMigrationCall__Inputs(this);
  }

  get outputs(): InitMigrationCall__Outputs {
    return new InitMigrationCall__Outputs(this);
  }
}

export class InitMigrationCall__Inputs {
  _call: InitMigrationCall;

  constructor(call: InitMigrationCall) {
    this._call = call;
  }

  get _scdMcdMigration(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _saiPool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitMigrationCall__Outputs {
  _call: InitMigrationCall;

  constructor(call: InitMigrationCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LockTokensCall extends EthereumCall {
  get inputs(): LockTokensCall__Inputs {
    return new LockTokensCall__Inputs(this);
  }

  get outputs(): LockTokensCall__Outputs {
    return new LockTokensCall__Outputs(this);
  }
}

export class LockTokensCall__Inputs {
  _call: LockTokensCall;

  constructor(call: LockTokensCall) {
    this._call = call;
  }
}

export class LockTokensCall__Outputs {
  _call: LockTokensCall;

  constructor(call: LockTokensCall) {
    this._call = call;
  }
}

export class MoveCommittedCall extends EthereumCall {
  get inputs(): MoveCommittedCall__Inputs {
    return new MoveCommittedCall__Inputs(this);
  }

  get outputs(): MoveCommittedCall__Outputs {
    return new MoveCommittedCall__Outputs(this);
  }
}

export class MoveCommittedCall__Inputs {
  _call: MoveCommittedCall;

  constructor(call: MoveCommittedCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MoveCommittedCall__Outputs {
  _call: MoveCommittedCall;

  constructor(call: MoveCommittedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OpenNextDrawCall extends EthereumCall {
  get inputs(): OpenNextDrawCall__Inputs {
    return new OpenNextDrawCall__Inputs(this);
  }

  get outputs(): OpenNextDrawCall__Outputs {
    return new OpenNextDrawCall__Outputs(this);
  }
}

export class OpenNextDrawCall__Inputs {
  _call: OpenNextDrawCall;

  constructor(call: OpenNextDrawCall) {
    this._call = call;
  }

  get nextSecretHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class OpenNextDrawCall__Outputs {
  _call: OpenNextDrawCall;

  constructor(call: OpenNextDrawCall) {
    this._call = call;
  }
}

export class PauseDepositsCall extends EthereumCall {
  get inputs(): PauseDepositsCall__Inputs {
    return new PauseDepositsCall__Inputs(this);
  }

  get outputs(): PauseDepositsCall__Outputs {
    return new PauseDepositsCall__Outputs(this);
  }
}

export class PauseDepositsCall__Inputs {
  _call: PauseDepositsCall;

  constructor(call: PauseDepositsCall) {
    this._call = call;
  }
}

export class PauseDepositsCall__Outputs {
  _call: PauseDepositsCall;

  constructor(call: PauseDepositsCall) {
    this._call = call;
  }
}

export class RemoveAdminCall extends EthereumCall {
  get inputs(): RemoveAdminCall__Inputs {
    return new RemoveAdminCall__Inputs(this);
  }

  get outputs(): RemoveAdminCall__Outputs {
    return new RemoveAdminCall__Outputs(this);
  }
}

export class RemoveAdminCall__Inputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAdminCall__Outputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }
}

export class RewardCall extends EthereumCall {
  get inputs(): RewardCall__Inputs {
    return new RewardCall__Inputs(this);
  }

  get outputs(): RewardCall__Outputs {
    return new RewardCall__Outputs(this);
  }
}

export class RewardCall__Inputs {
  _call: RewardCall;

  constructor(call: RewardCall) {
    this._call = call;
  }

  get _secret(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _salt(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RewardCall__Outputs {
  _call: RewardCall;

  constructor(call: RewardCall) {
    this._call = call;
  }
}

export class RewardAndOpenNextDrawCall extends EthereumCall {
  get inputs(): RewardAndOpenNextDrawCall__Inputs {
    return new RewardAndOpenNextDrawCall__Inputs(this);
  }

  get outputs(): RewardAndOpenNextDrawCall__Outputs {
    return new RewardAndOpenNextDrawCall__Outputs(this);
  }
}

export class RewardAndOpenNextDrawCall__Inputs {
  _call: RewardAndOpenNextDrawCall;

  constructor(call: RewardAndOpenNextDrawCall) {
    this._call = call;
  }

  get nextSecretHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get lastSecret(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _salt(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RewardAndOpenNextDrawCall__Outputs {
  _call: RewardAndOpenNextDrawCall;

  constructor(call: RewardAndOpenNextDrawCall) {
    this._call = call;
  }
}

export class RolloverCall extends EthereumCall {
  get inputs(): RolloverCall__Inputs {
    return new RolloverCall__Inputs(this);
  }

  get outputs(): RolloverCall__Outputs {
    return new RolloverCall__Outputs(this);
  }
}

export class RolloverCall__Inputs {
  _call: RolloverCall;

  constructor(call: RolloverCall) {
    this._call = call;
  }
}

export class RolloverCall__Outputs {
  _call: RolloverCall;

  constructor(call: RolloverCall) {
    this._call = call;
  }
}

export class RolloverAndOpenNextDrawCall extends EthereumCall {
  get inputs(): RolloverAndOpenNextDrawCall__Inputs {
    return new RolloverAndOpenNextDrawCall__Inputs(this);
  }

  get outputs(): RolloverAndOpenNextDrawCall__Outputs {
    return new RolloverAndOpenNextDrawCall__Outputs(this);
  }
}

export class RolloverAndOpenNextDrawCall__Inputs {
  _call: RolloverAndOpenNextDrawCall;

  constructor(call: RolloverAndOpenNextDrawCall) {
    this._call = call;
  }

  get nextSecretHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RolloverAndOpenNextDrawCall__Outputs {
  _call: RolloverAndOpenNextDrawCall;

  constructor(call: RolloverAndOpenNextDrawCall) {
    this._call = call;
  }
}

export class SaiTokenCall extends EthereumCall {
  get inputs(): SaiTokenCall__Inputs {
    return new SaiTokenCall__Inputs(this);
  }

  get outputs(): SaiTokenCall__Outputs {
    return new SaiTokenCall__Outputs(this);
  }
}

export class SaiTokenCall__Inputs {
  _call: SaiTokenCall;

  constructor(call: SaiTokenCall) {
    this._call = call;
  }
}

export class SaiTokenCall__Outputs {
  _call: SaiTokenCall;

  constructor(call: SaiTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetNextFeeBeneficiaryCall extends EthereumCall {
  get inputs(): SetNextFeeBeneficiaryCall__Inputs {
    return new SetNextFeeBeneficiaryCall__Inputs(this);
  }

  get outputs(): SetNextFeeBeneficiaryCall__Outputs {
    return new SetNextFeeBeneficiaryCall__Outputs(this);
  }
}

export class SetNextFeeBeneficiaryCall__Inputs {
  _call: SetNextFeeBeneficiaryCall;

  constructor(call: SetNextFeeBeneficiaryCall) {
    this._call = call;
  }

  get _feeBeneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNextFeeBeneficiaryCall__Outputs {
  _call: SetNextFeeBeneficiaryCall;

  constructor(call: SetNextFeeBeneficiaryCall) {
    this._call = call;
  }
}

export class SetNextFeeFractionCall extends EthereumCall {
  get inputs(): SetNextFeeFractionCall__Inputs {
    return new SetNextFeeFractionCall__Inputs(this);
  }

  get outputs(): SetNextFeeFractionCall__Outputs {
    return new SetNextFeeFractionCall__Outputs(this);
  }
}

export class SetNextFeeFractionCall__Inputs {
  _call: SetNextFeeFractionCall;

  constructor(call: SetNextFeeFractionCall) {
    this._call = call;
  }

  get _feeFraction(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNextFeeFractionCall__Outputs {
  _call: SetNextFeeFractionCall;

  constructor(call: SetNextFeeFractionCall) {
    this._call = call;
  }
}

export class SetPoolTokenCall extends EthereumCall {
  get inputs(): SetPoolTokenCall__Inputs {
    return new SetPoolTokenCall__Inputs(this);
  }

  get outputs(): SetPoolTokenCall__Outputs {
    return new SetPoolTokenCall__Outputs(this);
  }
}

export class SetPoolTokenCall__Inputs {
  _call: SetPoolTokenCall;

  constructor(call: SetPoolTokenCall) {
    this._call = call;
  }

  get _poolToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPoolTokenCall__Outputs {
  _call: SetPoolTokenCall;

  constructor(call: SetPoolTokenCall) {
    this._call = call;
  }
}

export class TokensReceivedCall extends EthereumCall {
  get inputs(): TokensReceivedCall__Inputs {
    return new TokensReceivedCall__Inputs(this);
  }

  get outputs(): TokensReceivedCall__Outputs {
    return new TokensReceivedCall__Outputs(this);
  }
}

export class TokensReceivedCall__Inputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get value5(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class TokensReceivedCall__Outputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }
}

export class TransferBalanceToSponsorshipCall extends EthereumCall {
  get inputs(): TransferBalanceToSponsorshipCall__Inputs {
    return new TransferBalanceToSponsorshipCall__Inputs(this);
  }

  get outputs(): TransferBalanceToSponsorshipCall__Outputs {
    return new TransferBalanceToSponsorshipCall__Outputs(this);
  }
}

export class TransferBalanceToSponsorshipCall__Inputs {
  _call: TransferBalanceToSponsorshipCall;

  constructor(call: TransferBalanceToSponsorshipCall) {
    this._call = call;
  }
}

export class TransferBalanceToSponsorshipCall__Outputs {
  _call: TransferBalanceToSponsorshipCall;

  constructor(call: TransferBalanceToSponsorshipCall) {
    this._call = call;
  }
}

export class UnlockTokensCall extends EthereumCall {
  get inputs(): UnlockTokensCall__Inputs {
    return new UnlockTokensCall__Inputs(this);
  }

  get outputs(): UnlockTokensCall__Outputs {
    return new UnlockTokensCall__Outputs(this);
  }
}

export class UnlockTokensCall__Inputs {
  _call: UnlockTokensCall;

  constructor(call: UnlockTokensCall) {
    this._call = call;
  }
}

export class UnlockTokensCall__Outputs {
  _call: UnlockTokensCall;

  constructor(call: UnlockTokensCall) {
    this._call = call;
  }
}

export class UnpauseDepositsCall extends EthereumCall {
  get inputs(): UnpauseDepositsCall__Inputs {
    return new UnpauseDepositsCall__Inputs(this);
  }

  get outputs(): UnpauseDepositsCall__Outputs {
    return new UnpauseDepositsCall__Outputs(this);
  }
}

export class UnpauseDepositsCall__Inputs {
  _call: UnpauseDepositsCall;

  constructor(call: UnpauseDepositsCall) {
    this._call = call;
  }
}

export class UnpauseDepositsCall__Outputs {
  _call: UnpauseDepositsCall;

  constructor(call: UnpauseDepositsCall) {
    this._call = call;
  }
}

export class WithdrawCall extends EthereumCall {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCommittedDepositCall extends EthereumCall {
  get inputs(): WithdrawCommittedDepositCall__Inputs {
    return new WithdrawCommittedDepositCall__Inputs(this);
  }

  get outputs(): WithdrawCommittedDepositCall__Outputs {
    return new WithdrawCommittedDepositCall__Outputs(this);
  }
}

export class WithdrawCommittedDepositCall__Inputs {
  _call: WithdrawCommittedDepositCall;

  constructor(call: WithdrawCommittedDepositCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCommittedDepositCall__Outputs {
  _call: WithdrawCommittedDepositCall;

  constructor(call: WithdrawCommittedDepositCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawCommittedDepositFromCall extends EthereumCall {
  get inputs(): WithdrawCommittedDepositFromCall__Inputs {
    return new WithdrawCommittedDepositFromCall__Inputs(this);
  }

  get outputs(): WithdrawCommittedDepositFromCall__Outputs {
    return new WithdrawCommittedDepositFromCall__Outputs(this);
  }
}

export class WithdrawCommittedDepositFromCall__Inputs {
  _call: WithdrawCommittedDepositFromCall;

  constructor(call: WithdrawCommittedDepositFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCommittedDepositFromCall__Outputs {
  _call: WithdrawCommittedDepositFromCall;

  constructor(call: WithdrawCommittedDepositFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawOpenDepositCall extends EthereumCall {
  get inputs(): WithdrawOpenDepositCall__Inputs {
    return new WithdrawOpenDepositCall__Inputs(this);
  }

  get outputs(): WithdrawOpenDepositCall__Outputs {
    return new WithdrawOpenDepositCall__Outputs(this);
  }
}

export class WithdrawOpenDepositCall__Inputs {
  _call: WithdrawOpenDepositCall;

  constructor(call: WithdrawOpenDepositCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawOpenDepositCall__Outputs {
  _call: WithdrawOpenDepositCall;

  constructor(call: WithdrawOpenDepositCall) {
    this._call = call;
  }
}

export class WithdrawSponsorshipAndFeeCall extends EthereumCall {
  get inputs(): WithdrawSponsorshipAndFeeCall__Inputs {
    return new WithdrawSponsorshipAndFeeCall__Inputs(this);
  }

  get outputs(): WithdrawSponsorshipAndFeeCall__Outputs {
    return new WithdrawSponsorshipAndFeeCall__Outputs(this);
  }
}

export class WithdrawSponsorshipAndFeeCall__Inputs {
  _call: WithdrawSponsorshipAndFeeCall;

  constructor(call: WithdrawSponsorshipAndFeeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawSponsorshipAndFeeCall__Outputs {
  _call: WithdrawSponsorshipAndFeeCall;

  constructor(call: WithdrawSponsorshipAndFeeCall) {
    this._call = call;
  }
}
